4.1.1 Describe the purpose and use of C programming fundamentals:
 The main() function
 The return statement
 Macro guards
 Data types
 Functions and procedures
 Parameters
 Scope
 Return values (return type and reference)
 Header files
 Keywords (static and extern)
 Pointers
 An array
 C preprocessor
 Casting
 Control flow
 Endianness
 Multi-byte vs. Unicode character sets
 Multi-threading
 Hashing
Trainee Trainer Date
Condition A – Standard A
4.1.2 Describe C programming concepts in regards to memory:
 Memory map of a C program
 Stack
 Heap
 Stack vs Heap

4.1.20 Describe how and when bitwise operators are used:
 and (&)
 or (|)
 xor (^)
 bitwise complement (~)
 shift left (<<)
 shift right (>>)
 Add, removing, and testing for single-bit flags
 Extracting arbitrary bytes from multi-byte data types

4.1.24 Describe the concepts and terminology associated with multithreaded programs:
 thread
 pthread
 fork
 join
 create
 exit
 detach
 self
 mutex
 semaphore
 race condition
 deadlock
 thread safe
 thread id


4.2.1 Describe purpose and use of foundational Python mechanics:
 The return statement
 Data types
 A function
 Parameters
 Scope
 Return values (return type and reference)
 Import files
 Dictionaries
 List
 Tuple
 Singleton
 The term mutable
 The term immutable


4.4.2 Describe concepts associated with traversal techniques:
 Depth first traversal
 Breadth first traversal
 The technique of determining the weight of a given path when traversing a
graph
 How the most efficient path for traversing a graph is determined
Trainee Trainer Date
Condition B – Standard A
4.4.3 Describe concepts associated with hashing:
 Data distribution as it relates to hashing
 Hash function efficiency
 Hash collisions

4.5.1 Describe terms and concepts associated with Operating System (OS)
virtualization:
 Processes
 CPU scheduling
 Paging tables
 Caching
 Kernel and user-mode memory

4.5.3 Describe terms and concepts associated with OS concurrency:
 Threading
 Locks
 Race conditions
 Deadlocks
 Scheduling algorithms, i.e., round robin, shortest job first, priority scheduling,
etc.


4.5.5 Describe terms and concepts associated with OS persistence:
 Princeton / von Neumann architecture
 Harvard architecture
 File systems
 The boot process


4.6.1 Describe terms and concepts associated with secure coding practices:
 Common string-handling functions
 Which functions guarantee null terminated strings
 An off-by-one error
 An integer overflow
 A buffer overflow
 The concept of use-after-free
 Resource acquisition is initialization (RAII)
 The difference between a regular expression and context-free grammar
 The difference between input validation vs. input sanitization
 The meaning of a pure function and if a function has a side-effect
 General low-level crypto basics


4.7.1 Describe the concepts and terms associated with networking fundamentals:
 Transmission Control Protocol (TCP) / User Datagram Protocol (UDP)
 Open Systems Interconnect (OSI) model
 POSIX API/BSD sockets
 Purpose and use of sockets
 Request For Comments (RFCs)
 Purpose of subnetting


4.7.2 Describe the concepts and terms associated with common protocols
and their associated ports, if applicable:
 Address Resolution Protocol (ARP)
 Hypertext Transfer Protocol/Secure (HTTP/HTTPS)
 Domain Name System (DNS)
 Simple Mail Transfer Protocol (SMTP)
 Internet Control Message Protocol (ICMP)
 Dynamic Host Configuration Protocol (DHCP)
 Internet Protocol version 4 (IPv4)
 Internet Protocol version 6 (IPv6)


4.7.3 Describe the addressing associated with key networking protocols:
 IPv4
 IPv6
 Ethernet


4.8.4 Describe libraries commonly used to aid in serialization

4.2.9 Describe the terms and fundamentals associated with objectoriented programming using Python:
Training Resources: • Design Patterns: Elements of Reusable Object-Oriented
Software (Gamma, Helm, Johnson, Vlissides)
 Class
 Object
 Difference between an object when discussing a class
 Advantages to object-oriented programming
 Inheritance
 The keyword ”super”
 Initialization function of a constructor
 The keyword ”self”
 The getter and setter functions
 Attributes of a class
 Factory design pattern
 Singleton design pattern
 Adapter design pattern
 Bridge design pattern


4.3.1 Describe the concepts and terms associated with key data structures:
 Binary search tree
 Linked list
 Double linked list
 Circularly linked list
 Weighted graph
 Common pitfalls when using linked lists, trees, and graphs
 The effect of First In First Out (FIFO) and Last In First Out (LIFO)
